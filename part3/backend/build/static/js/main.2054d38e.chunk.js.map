{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Person","person","removePerson","name","number","onClick","event","id","NumberForm","addNumber","newName","handleNameChange","newNumber","handleNumberChange","persons","onSubmit","value","onChange","type","map","key","App","props","preventDefault","console","log","state","phonebookObj","toUpperCase","includes","alert","axios","post","then","response","setState","concat","data","target","find","window","confirm","delete","baseUrl","filter","get","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2054d38e.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n\nconst baseUrl = '/api/persons'\nconst mongourl = `mongodb+srv://web_and_mobi:NEyxyzGXFXMTLwQ6@cluster0-ykr2k.mongodb.net/fullstack-phonebook`\n\nconst Person = ({person, removePerson}) => {\n  return (\n    <tr>\n      <td >{person.name} {person.number}  <button onClick={(event) => removePerson(person.id, event)}>Delete</button></td>\n    </tr>\n  )\n}\n\nconst NumberForm = ({addNumber, newName, handleNameChange, newNumber, handleNumberChange, persons, removePerson}) => {\n  return(\n    <div>\n        <h2>Puhelinluettelo</h2>\n        <form onSubmit={addNumber}>\n          <div>\n            nimi: <input  value={newName} onChange={handleNameChange} />\n          </div>\n          <div>\n            numero: <input  value={newNumber} onChange={handleNumberChange} />\n          </div>\n          <div>\n            <button type=\"submit\">lisää</button>\n          </div>\n        </form>\n        <h2>Numerot</h2>\n        <table>\n          <tbody>\n            {persons.map(person => <Person key={person.id} person={person} removePerson={removePerson} />)}\n          </tbody>\n        </table>\n      </div>\n  )\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [],\n      newName: '',\n      newNumber: ''\n    }\n  }\n\n  componentDidMount() {\n    axios.get(baseUrl).then(response => { this.setState({persons: response.data})})\n  }\n\n  addNumber = (event) => {\n    event.preventDefault()\n    console.log(this.state.newName)\n    const phonebookObj = {name: this.state.newName, number: this.state.newNumber}\n    //const persons = this.state.persons.concat(phonebookObj)\n    if (this.state.persons.map(persons => persons.name.toUpperCase()).includes(phonebookObj.name.toUpperCase())) {\n      alert('This number already exists-')\n      return\n    }\n    axios.post(baseUrl, phonebookObj)\n    .then(response => {\n      this.setState({persons: this.state.persons.concat(response.data)})\n    })\n    \n  }\n\n  handleNameChange = (event) => {\n    this.setState({ newName: event.target.value})\n  }\n\n  handleNumberChange = (event) => {\n    this.setState({newNumber: event.target.value})\n  }\n\n  removePerson = (id, event) => {\n    const person = this.state.persons.find(person => person.id === id)\n    if (!window.confirm(`Are you sure you want to remove ${person.name}`)) {\n      return\n    }\n    axios.delete(baseUrl + '/' + id, person)\n    .then(response => \n      this.setState({persons: this.state.persons.filter(person => person.id !== id)})\n    )\n  }\n\n  render() {\n    return (\n      <NumberForm addNumber={this.addNumber} newName={this.state.newName} handleNameChange={this.handleNameChange} newNumber={this.state.newNumber} handleNumberChange={this.handleNumberChange} persons={this.state.persons} removePerson={this.removePerson}/>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}